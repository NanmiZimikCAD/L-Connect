@model L_Connect.Models.ViewModels.Quote.QuoteRequestViewModel

<div class="container py-5">
    <div class="card shadow-sm">
        <div class="card-body">
            <h2 class="mb-4 text-primary">Request a Quote</h2>

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <div asp-validation-summary="All" class="text-danger"></div>
                </div>
            }

            <form asp-action="Create" method="post" id="quoteForm">
                <!-- Customer Info -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="CustomerName" class="form-label fw-bold"></label>
                        <input asp-for="CustomerName" class="form-control" />
                        <span asp-validation-for="CustomerName" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Email" class="form-label fw-bold"></label>
                        <input asp-for="Email" class="form-control" />
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>
                </div>

                <!-- Source and Destination -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="Source" class="form-label fw-bold"></label>
                        <select asp-for="Source" id="sourceSelect" class="form-select">
                            <option value="">Select Source</option>
                            @foreach (var origin in Model.AvailableOrigins)
                            {
                                <option value="@origin">@origin</option>
                            }
                        </select>
                        <span asp-validation-for="Source" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="Destination" class="form-label fw-bold"></label>
                        <select asp-for="Destination" id="destinationSelect" class="form-select">
                            <option value="">Select Destination</option>
                            @foreach (var destination in Model.AvailableDestinations)
                            {
                                <option value="@destination">@destination</option>
                            }
                        </select>
                        <span asp-validation-for="Destination" class="text-danger"></span>
                    </div>
                </div>

                <!-- Transportation Method -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="TransportationMethod" class="form-label fw-bold"></label>
                        <div id="transportMethodContainer">
                            @if (Model.TransportMethodPrices.Any())
                            {
                                @foreach (var method in Model.TransportMethodPrices)
                                {
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio" name="TransportationMethod" 
                                               id="transport_@method.Key" value="@method.Key" 
                                               @(Model.TransportationMethod == method.Key ? "checked" : "")
                                               data-price="@method.Value" />
                                        <label class="form-check-label" for="transport_@method.Key">
                                            @method.Key - $@method.Value
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-muted">Select Source and Destination first</div>
                            }
                        </div>
                        <span asp-validation-for="TransportationMethod" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="Weight" class="form-label fw-bold"></label>
                        <div class="input-group">
                            <input asp-for="Weight" id="weightInput" type="number" step="0.01" class="form-control" placeholder="Enter weight" min="0.1" />
                            <span class="input-group-text">kg</span>
                        </div>
                        <span asp-validation-for="Weight" class="text-danger"></span>
                    </div>
                </div>

                <!-- Quantity and Additional Services -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="Quantity" class="form-label fw-bold"></label>
                        <input asp-for="Quantity" id="quantityInput" type="number" min="1" class="form-control" />
                        <div id="bulkDiscountInfo" class="form-text text-success">
                            @if (Model.BulkThreshold > 0)
                            {
                                <span>Orders of @Model.BulkThreshold or more qualify for a @(Model.BulkDiscountRate * 100)% discount!</span>
                            }
                        </div>
                        <span asp-validation-for="Quantity" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label fw-bold">Additional Services</label>
                        <div class="form-check mb-2">
                            <input class="form-check-input service-checkbox" type="checkbox" asp-for="NeedsCustomServices" id="customServicesCheck" />
                            <label class="form-check-label" for="customServicesCheck">
                                Custom Services (+$<span id="customServicePrice">@Model.CustomServiceCharge</span> per parcel)
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input service-checkbox" type="checkbox" asp-for="NeedsInsurance" id="insuranceCheck" />
                            <label class="form-check-label" for="insuranceCheck">
                                Insurance (+$<span id="insurancePrice">@Model.InsuranceCharge</span> per parcel)
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Additional Details -->
                <div class="mb-3">
                    <label asp-for="AdditionalDetails" class="form-label fw-bold"></label>
                    <textarea asp-for="AdditionalDetails" class="form-control"></textarea>
                </div>

                <!-- Price Estimate -->
                <div class="card mb-4 border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Estimated Quote</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Base Rate:</strong> $<span id="baseRate">0.00</span></p>
                                <p><strong>Weight Cost:</strong> $<span id="weightCost">0.00</span></p>
                                <p><strong>Subtotal:</strong> $<span id="subtotal">0.00</span></p>
                            </div>
                            <div class="col-md-6">
                                <p id="discountRow" style="display: none;"><strong>Bulk Discount:</strong> -$<span id="discountAmount">0.00</span></p>
                                <p id="customServiceRow" style="display: none;"><strong>Custom Services:</strong> $<span id="customServiceTotal">0.00</span></p>
                                <p id="insuranceRow" style="display: none;"><strong>Insurance:</strong> $<span id="insuranceTotal">0.00</span></p>
                                <p class="fw-bold fs-5 text-primary"><strong>Estimated Total:</strong> $<span id="estimatedTotal">0.00</span></p>
                            </div>
                        </div>
                        <div class="alert alert-info mb-0">
                            <small>This is an estimate only. Final pricing may vary based on actual weight and services required.</small>
                        </div>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="text-center">
                    <button type="submit" class="btn btn-primary me-2">
                        Get Quote
                    </button>
                    <a asp-action="Index" asp-controller="Home" class="btn btn-outline-secondary">
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Function to update destination options when source changes
        function updateDestinations() {
            const sourceSelect = document.getElementById('sourceSelect');
            const destinationSelect = document.getElementById('destinationSelect');
            const source = sourceSelect.value;
            
            if (source) {
                fetch(`/QuoteRequest/GetDestinations?origin=${encodeURIComponent(source)}`)
                    .then(response => response.json())
                    .then(data => {
                        // Clear current options
                        destinationSelect.innerHTML = '<option value="">Select Destination</option>';
                        
                        // Add new options
                        data.forEach(dest => {
                            const option = document.createElement('option');
                            option.value = dest;
                            option.textContent = dest;
                            destinationSelect.appendChild(option);
                        });
                        
                        // Trigger change event to update transport methods
                        destinationSelect.dispatchEvent(new Event('change'));
                    })
                    .catch(error => console.error('Error fetching destinations:', error));
            } else {
                // Clear destination dropdown if no source selected
                destinationSelect.innerHTML = '<option value="">Select Destination</option>';
                // Clear transport methods
                document.getElementById('transportMethodContainer').innerHTML = 
                    '<div class="text-muted">Select Source and Destination first</div>';
            }
        }
        
        // Function to update transportation methods when destination changes
        function updateTransportMethods() {
            const sourceSelect = document.getElementById('sourceSelect');
            const destinationSelect = document.getElementById('destinationSelect');
            const transportContainer = document.getElementById('transportMethodContainer');
            
            const source = sourceSelect.value;
            const destination = destinationSelect.value;
            
            if (source && destination) {
                fetch(`/QuoteRequest/GetTransportMethods?origin=${encodeURIComponent(source)}&destination=${encodeURIComponent(destination)}`)
                    .then(response => response.json())
                    .then(data => {
                        // Clear current options
                        transportContainer.innerHTML = '';
                        
                        // Add new radio buttons
                        Object.entries(data).forEach(([method, price], index) => {
                            const div = document.createElement('div');
                            div.className = 'form-check mb-2';
                            
                            const input = document.createElement('input');
                            input.className = 'form-check-input';
                            input.type = 'radio';
                            input.name = 'TransportationMethod';
                            input.id = `transport_${method}`;
                            input.value = method;
                            input.dataset.price = price;
                            input.checked = index === 0; // Select first option by default
                            input.addEventListener('change', calculateEstimate);
                            
                            const label = document.createElement('label');
                            label.className = 'form-check-label';
                            label.htmlFor = `transport_${method}`;
                            label.textContent = `${method} - $${price}`;
                            
                            div.appendChild(input);
                            div.appendChild(label);
                            transportContainer.appendChild(div);
                        });
                        
                        // Update route info
                        updateRouteInfo();
                        
                        // Calculate initial estimate
                        calculateEstimate();
                    })
                    .catch(error => {
                        console.error('Error fetching transport methods:', error);
                        transportContainer.innerHTML = '<div class="text-danger">Error loading transportation methods</div>';
                    });
            } else {
                // Clear transportation methods if source or destination is missing
                transportContainer.innerHTML = '<div class="text-muted">Select Source and Destination first</div>';
            }
        }
        
        // Function to update additional route information
        function updateRouteInfo() {
            const sourceSelect = document.getElementById('sourceSelect');
            const destinationSelect = document.getElementById('destinationSelect');
            const bulkDiscountInfo = document.getElementById('bulkDiscountInfo');
            const customServicePrice = document.getElementById('customServicePrice');
            const insurancePrice = document.getElementById('insurancePrice');
            
            const source = sourceSelect.value;
            const destination = destinationSelect.value;
            
            if (source && destination) {
                fetch(`/QuoteRequest/GetRouteInfo?origin=${encodeURIComponent(source)}&destination=${encodeURIComponent(destination)}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data) {
                            // Update service charges
                            customServicePrice.textContent = data.customServiceCharge.toFixed(2);
                            insurancePrice.textContent = data.insuranceCharge.toFixed(2);
                            
                            // Update bulk discount info
                            bulkDiscountInfo.innerHTML = `<span>Orders of ${data.bulkThreshold} or more qualify for a ${(data.bulkDiscountRate * 100).toFixed(0)}% discount!</span>`;
                            
                            // Store values as data attributes for calculations
                            document.getElementById('quoteForm').dataset.bulkThreshold = data.bulkThreshold;
                            document.getElementById('quoteForm').dataset.bulkDiscountRate = data.bulkDiscountRate;
                            document.getElementById('quoteForm').dataset.customServiceCharge = data.customServiceCharge;
                            document.getElementById('quoteForm').dataset.insuranceCharge = data.insuranceCharge;
                            
                            // Calculate estimate
                            calculateEstimate();
                        }
                    })
                    .catch(error => console.error('Error fetching route info:', error));
            }
        }
        
        // Function to calculate price estimate
        function calculateEstimate() {
            const transportMethodInputs = document.querySelectorAll('input[name="TransportationMethod"]');
            const weightInput = document.getElementById('weightInput');
            const quantityInput = document.getElementById('quantityInput');
            const customServicesCheck = document.getElementById('customServicesCheck');
            const insuranceCheck = document.getElementById('insuranceCheck');
            const form = document.getElementById('quoteForm');
            
            // Get base values
            let selectedTransportMethod = null;
            let baseRate = 0;
            
            // Find selected transport method
            for (const input of transportMethodInputs) {
                if (input.checked) {
                    selectedTransportMethod = input;
                    baseRate = parseFloat(input.dataset.price) || 0;
                    break;
                }
            }
            
            if (!selectedTransportMethod || isNaN(parseFloat(weightInput.value)) || 
                isNaN(parseInt(quantityInput.value)) || parseFloat(weightInput.value) <= 0 || 
                parseInt(quantityInput.value) <= 0) {
                // Cannot calculate if essential values are missing or invalid
                return;
            }
            
            // Extract values
            const weight = parseFloat(weightInput.value);
            const quantity = parseInt(quantityInput.value);
            const bulkThreshold = parseInt(form.dataset.bulkThreshold || 10);
            const bulkDiscountRate = parseFloat(form.dataset.bulkDiscountRate || 0.10);
            const customServiceCharge = parseFloat(form.dataset.customServiceCharge || 50);
            const insuranceCharge = parseFloat(form.dataset.insuranceCharge || 20);
            
            // Simple weight cost calculation (this is a placeholder - adjust based on your business logic)
            const weightRate = selectedTransportMethod.value === 'Flight' ? 5 : 3;
            const weightCost = weight * quantity * weightRate;
            
            // Calculate subtotal
            const subtotal = baseRate + weightCost;
            
            // Calculate discount
            let discountAmount = 0;
            if (quantity >= bulkThreshold) {
                discountAmount = subtotal * bulkDiscountRate;
                document.getElementById('discountRow').style.display = 'block';
            } else {
                document.getElementById('discountRow').style.display = 'none';
            }
            
            // Calculate additional services
            const customServiceTotal = customServicesCheck.checked ? customServiceCharge * quantity : 0;
            const insuranceTotal = insuranceCheck.checked ? insuranceCharge * quantity : 0;
            
            // Display or hide additional service rows
            document.getElementById('customServiceRow').style.display = customServicesCheck.checked ? 'block' : 'none';
            document.getElementById('insuranceRow').style.display = insuranceCheck.checked ? 'block' : 'none';
            
            // Calculate total
            const total = subtotal - discountAmount + customServiceTotal + insuranceTotal;
            
            // Update the display
            document.getElementById('baseRate').textContent = baseRate.toFixed(2);
            document.getElementById('weightCost').textContent = weightCost.toFixed(2);
            document.getElementById('subtotal').textContent = subtotal.toFixed(2);
            document.getElementById('discountAmount').textContent = discountAmount.toFixed(2);
            document.getElementById('customServiceTotal').textContent = customServiceTotal.toFixed(2);
            document.getElementById('insuranceTotal').textContent = insuranceTotal.toFixed(2);
            document.getElementById('estimatedTotal').textContent = total.toFixed(2);
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Initial setup
            if (document.getElementById('sourceSelect').value) {
                updateDestinations();
            }
            
            // Source change
            document.getElementById('sourceSelect').addEventListener('change', updateDestinations);
            
            // Destination change
            document.getElementById('destinationSelect').addEventListener('change', updateTransportMethods);
            
            // Price calculation triggers
            document.getElementById('weightInput').addEventListener('input', calculateEstimate);
            document.getElementById('quantityInput').addEventListener('input', calculateEstimate);
            
            // Additional services
            document.querySelectorAll('.service-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', calculateEstimate);
            });
            
            // Initial calculation
            calculateEstimate();
        });
    </script>
}